### Description

A polynomial is an expression consisting of variables (coefficients) and the powers of x. For example, \(4x^3 + 3x^2 + 2x + 1\).

Each term in the polynomial is composed of a coefficient \( a_i \) and an exponent \( i \), forming the expression:

\[
f_a(x) = \sum a_i x^i
\]

Polynomial addition is defined as adding the coefficients of corresponding powers:

\[
f_{a+b}(x) = \sum (a_i + b_i) x^i
\]

In this problem, you are given two polynomials; please output the result of their addition.

### Input
- Each test case includes two polynomials:
  - Each polynomial starts with an integer \( N \), representing the number of non-zero terms.
  - The following \( N \) lines contain two integers, representing the coefficient (\( a_i \) or \( b_i \)) and the exponent (\( i \)).

Constraints:
- \( 0 < N \leq 1001 \)
- All coefficients do not exceed 1,000.
- All exponents do not exceed 1,000,000,000.
- All coefficients are greater than 0, and all exponents are not less than 0.

### Output
- Output the resulting polynomial as a single line, in descending order of exponents, with terms formatted as shown in the examples.

### Sample Input 1 
```
2
2 2
1 0
3
1 3
2 2
3 1
```

### Sample Output 1
```
x^3+4x^2+3x+1
```

### Sample Input 2 
```
3
3 3
2 1
1 0
2
1 2
2 1
```

### Sample Output 2
```
3x^3+x^2+4x+1
```

#include <iostream>
#include <map> // 儲放一對pair (key/ value)
#include <vector>   // 用在額外從map 裡面拉出一個資料做排序
#include <algorithm>  // 用在sort

using namespace std;

int main() {
    int N1, N2;
    map<int, int> polynomial;  // A map to store the exponent as key and coefficient as value

    // Read the first polynomial
    cin >> N1;
    for (int i = 0; i < N1; i++) {
        int coefficient, exponent;
        cin >> coefficient >> exponent;
        polynomial[exponent] += coefficient;  // Add the coefficient to the corresponding exponent
    }

    // Read the second polynomial
    cin >> N2;
    for (int i = 0; i < N2; i++) {
        int coefficient, exponent;
        cin >> coefficient >> exponent;
        polynomial[exponent] += coefficient;  // Add the coefficient to the corresponding exponent
    }

    // Collect exponents in a vector
    vector<int> exponents;       // 額外建立一個 vector 這樣才能方便 sort ！！
    for ( auto& term : polynomial) {   // 遍歷 map 裡面的資料，跟遍歷矩陣方法依樣，不過term 是代表一個pair (key /value) 
        exponents.push_back(term.first);  // 把想要儲存的資料，從 map 裡面拿出來，可以用term來表示 exponent /coefficient，term.first 就是 exponents， term.second 就是coefficient!!
    }

    // Sort exponents in descending order
    sort(exponents.rbegin(), exponents.rend()); // 因為排序要高到低，因此用 rbegin()/ rend()

    // Output the resulting polynomial
    bool firstTerm = true;    // 要判別是否係數前面給予 +
    for (int exp : exponents) {  //遍歷每一個 vector 裡面的 exponents 
        int coeff = polynomial[exp];
        if (coeff != 0) {  // Only print non-zero coefficients
            if (!firstTerm) {
                cout << "+";  // 要判別是否係數前面給予 +
            }
            if (coeff == 1&& exp != 0 ) {  // 確保係數等於 1 家上不是常數
                if (exp == 1) {
                    cout << "x";
                } else {
                    cout << "x^" << exp;
                }
            } else if (coeff == -1 && exp != 0) { // 確保係數等於 -1 家上不是常數
                if (exp == 1) {
                    cout << "-x";
                } else {
                    cout << "-x^" << exp;
                }
            } else {
                if (exp == 0) {
                    cout << coeff;  // Print the constant term
                } else if (exp == 1) {
                    cout << coeff << "x";  // Print x^1 term
                } else {
                    cout << coeff << "x^" << exp;  // Print general terms
                }
            }
            firstTerm = false;  // 要判別是否係數前面給予 +
        }
    }

    if (firstTerm) {  //防止係數相加等於 0 的情況
        cout << "0";  
    }
    cout << endl;

    return 0;
}
